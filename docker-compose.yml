version: '3.8'

services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DJANGO_SECRET_KEY=dev-secret-key-change-in-production
      - DJANGO_DEBUG=True
      - DJANGO_ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0
      - DATABASE_URL=sqlite:///db.sqlite3
      - CORS_ALLOWED_ORIGINS=http://localhost:3000,http://127.0.0.1:3000
      - MEDIA_ROOT=uploads/
      - MEDIA_URL=/media/
    volumes:
      # Mount code for development (comment out for production)
      - ./backend:/app
      # Persistent volume for uploads
      - uploads_data:/app/uploads
    command: >
      sh -c "
        python manage.py migrate &&
        python manage.py create_api_user --username=devuser --email=dev@example.com &&
        gunicorn --bind 0.0.0.0:8000 project.wsgi:application
      "
    depends_on:
      - db
    networks:
      - geolens-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000/api
      - NEXT_PUBLIC_MAPBOX_TOKEN=${NEXT_PUBLIC_MAPBOX_TOKEN:-your-mapbox-token-here}
      - NODE_ENV=production
    volumes:
      # Mount code for development (comment out for production)
      - ./frontend:/app
      - /app/node_modules
    command: >
      sh -c "
        npm install &&
        npm run build &&
        npm start
      "
    depends_on:
      - backend
    networks:
      - geolens-network

  # Optional PostgreSQL database (uncomment to use instead of SQLite)
  # db:
  #   image: postgres:15-alpine
  #   environment:
  #     - POSTGRES_DB=geolens
  #     - POSTGRES_USER=geolens
  #     - POSTGRES_PASSWORD=geolens_password
  #   volumes:
  #     - postgres_data:/var/lib/postgresql/data
  #   ports:
  #     - "5432:5432"
  #   networks:
  #     - geolens-network

  # Dummy db service for SQLite (required for depends_on)
  db:
    image: alpine:latest
    command: ["sh", "-c", "echo 'SQLite database - no separate service needed' && sleep infinity"]
    networks:
      - geolens-network

volumes:
  uploads_data:
  # postgres_data:  # Uncomment if using PostgreSQL

networks:
  geolens-network:
    driver: bridge
